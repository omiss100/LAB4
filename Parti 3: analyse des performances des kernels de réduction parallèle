%%writefile parallel_reduction_analysis.cu

// Parti 3: analyse des performances des kernels de réduction parallèle

#include <cuda_runtime.h>
#include <stdio.h>

#define BLOCK_SIZE 1024

// Kernel de réduction avec mémoire partagée
__global__ void reductionSharedMemory(float *input, float *output, int size) {
    __shared__ float sharedData[BLOCK_SIZE];

    int tid = threadIdx.x;
    int idx = blockIdx.x * blockDim.x + threadIdx.x;

    sharedData[tid] = (idx < size) ? input[idx] : 0.0f;
    __syncthreads();

    for (int stride = blockDim.x / 2; stride > 0; stride >>= 1) {
        if (tid < stride) {
            sharedData[tid] += sharedData[tid + stride];
        }
        __syncthreads();
    }

    if (tid == 0) {
        output[blockIdx.x] = sharedData[0];
    }
}

// Kernel de réduction avec instructions de shuffle
__global__ void reductionShuffle(float *input, float *output, int size) {
    float sum = 0.0f;
    int idx = blockIdx.x * blockDim.x + threadIdx.x;

    if (idx < size) {
        sum = input[idx];
    }

    for (int stride = warpSize / 2; stride > 0; stride >>= 1) {
        sum += __shfl_down_sync(0xffffffff, sum, stride);
    }

    if ((threadIdx.x % warpSize) == 0) {
        atomicAdd(output, sum);
    }
}

int main() {
    const int size = 1 << 20;  // 1M éléments
    const int numBlocks = (size + BLOCK_SIZE - 1) / BLOCK_SIZE;

    float *h_input = (float *)malloc(size * sizeof(float));
    float *h_output = (float *)malloc(numBlocks * sizeof(float));
    float *d_input, *d_output;

    cudaMalloc(&d_input, size * sizeof(float));
    cudaMalloc(&d_output, numBlocks * sizeof(float));

    for (int i = 0; i < size; ++i) {
        h_input[i] = 1.0f;
    }

    cudaMemcpy(d_input, h_input, size * sizeof(float), cudaMemcpyHostToDevice);

    dim3 blockDim(BLOCK_SIZE);
    dim3 gridDim(numBlocks);

    cudaEvent_t start, stop;
    float elapsedTime;

    cudaEventCreate(&start);
    cudaEventCreate(&stop);

    // Mesurer le kernel avec mémoire partagée
    cudaEventRecord(start, 0);
    reductionSharedMemory<<<gridDim, blockDim>>>(d_input, d_output, size);
    cudaEventRecord(stop, 0);
    cudaEventSynchronize(stop);
    cudaEventElapsedTime(&elapsedTime, start, stop);
    printf("Temps d'exécution (mémoire partagée) : %f ms\n", elapsedTime);

    // Réduction finale sur CPU
    cudaMemcpy(h_output, d_output, numBlocks * sizeof(float), cudaMemcpyDeviceToHost);
    float finalSumShared = 0.0f;
    for (int i = 0; i < numBlocks; ++i) {
        finalSumShared += h_output[i];
    }
    printf("Somme totale (mémoire partagée) : %f\n", finalSumShared);

    // Réinitialiser la mémoire GPU
    cudaMemset(d_output, 0, sizeof(float));

    // Mesurer le kernel avec shuffle
    cudaEventRecord(start, 0);
    reductionShuffle<<<gridDim, blockDim>>>(d_input, d_output, size);
    cudaEventRecord(stop, 0);
    cudaEventSynchronize(stop);
    cudaEventElapsedTime(&elapsedTime, start, stop);
    printf("Temps d'exécution (shuffle) : %f ms\n", elapsedTime);

    // Résultat final pour shuffle
    cudaMemcpy(h_output, d_output, sizeof(float), cudaMemcpyDeviceToHost);
    printf("Somme totale (shuffle) : %f\n", h_output[0]);

    // Libération des ressources
    cudaEventDestroy(start);
    cudaEventDestroy(stop);
    free(h_input);
    free(h_output);
    cudaFree(d_input);
    cudaFree(d_output);

    return 0;
}
